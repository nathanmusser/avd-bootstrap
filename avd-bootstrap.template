#!/bin/bash
#
#
# ARG_OPTIONAL_SINGLE([pythonpath], [p], [The path to the python interpreter])
# ARG_OPTIONAL_BOOLEAN([verbose], [v], [Print verbose output])
# ARG_HELP([The general script's help msg])
# ARGBASH_GO

# [ <-- needed because of Argbash

MIN_PYTHON_VERSION=3.10
REC_PYTHON_VERSION=3.12

# echodiag used for outputting any diagnostic info
# echoerr used for outputting any errors
# both output to stderr
echodiag() { if [ "$_arg_verbose" == "on" ]; then echo "$@" 1>&2; fi }
echoerr() { echo "ERROR: $@" 1>&2; }

# Use user supplied python path if provided, otherwise default to system python3
if ! [ "$_arg_pythonpath" == "" ]; then
    python_path=$_arg_pythonpath
else
    python_path=$(which python3)
fi

# 
if [ "$python_path" == "" ]; then
    echoerr "Python not found - please use -p, --pythonpath to specify the path to a compatible python interpreter [ $MIN_PYTHON_VERSION - $REC_PYTHON_VERSION ] "
    exit 1
else
    echodiag "Found python at $python_path"
fi

# Check Python version is compatible
python_version=$($python_path --version 2>&1 | awk '{print $2}')
python_version_major=$(echo "$python_version" | cut -d. -f1)
python_version_minor=$(echo "$python_version" | cut -d. -f2)
min_python_version_major=$(echo "$MIN_PYTHON_VERSION" | cut -d. -f1)
min_python_version_minor=$(echo "$MIN_PYTHON_VERSION" | cut -d. -f2)
max_python_version_major=$(echo "$REC_PYTHON_VERSION" | cut -d. -f1)
max_python_version_minor=$(echo "$REC_PYTHON_VERSION" | cut -d. -f2)

if ! [ "$python_version" == "" ] && \
   (( python_version_major > min_python_version_major || ( python_version_major == min_python_version_major && python_version_minor >= min_python_version_minor ) )) && \
   (( python_version_major < max_python_version_major || ( python_version_major == max_python_version_major && python_version_minor <= max_python_version_minor ) )); then
    echodiag "..python version is compatible"
else
    echoerr "Python version NOT compatible, requires $MIN_PYTHON_VERSION - $REC_PYTHON_VERSION, found version $python_version"
    exit 1
fi

# Check if ensurepip is installed, required by venv
$python_path -m ensurepip --version &> /dev/null
if ! [ $? -eq 0 ]; then
    echoerr "Python missing package ensurepip"
    exit 1
fi

# ] <-- needed because of Argbash